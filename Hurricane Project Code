#Project Data

# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]


#Project Code
# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}
updated_damages = []
def damage_function(damagess):
  for element in damagess:
    if "M" in element:
      updated_damages.append(float(element.replace('M',""))*conversion.get("M"))
    elif "B" in element:
      updated_damages.append(float(element.replace('B',""))*conversion.get("B"))
    elif element == "Damages not recorded":
      updated_damages.append("Damages not recorded")
  return updated_damages
damage_function(damages)

#print(damage_function(damages))


# test function by updating damages
print("")

# 2 
# Create a Table
list_hurricanes = list(zip(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths))
# Create and view the hurricanes dictionary
def hurricane_function(param1):
  hurricanes_minor = []
  for item in param1:
    hurricanes_minor.append({"Name": item[0],
 "Month": item[1],
 "Year": item[2],
 "Max Sustained Wind": item[3],
 "Areas Affected": item[4],
 "Damage": item[5],
 "Deaths": item[6]})
  hurricanes = {key:value for key, value in zip(names,hurricanes_minor)}
  return hurricanes
hurricane = hurricane_function(list_hurricanes)
# 3
# Organizing by Year

# create a new dictionary of hurricanes with year and key

def hurricane_year_function(param1):
  hurricanes_minor = []
  for item in param1:
    hurricanes_minor.append({"Name": item[0],
 "Month": item[1],
 "Year": item[2],
 "Max Sustained Wind": item[3],
 "Areas Affected": item[4],
 "Damage": item[5],
 "Deaths": item[6]})

  hurricane_by_year = {key:value for key,value in zip(years, hurricanes_minor)}
  return hurricane_by_year
hurricane_year_dict = hurricane_year_function(list_hurricanes)





# 4
# Counting Damaged Areas

def areas_affected_function(param1):
  a_a = {}
  for element in param1:
    for item in element:
      if item not in a_a:
        count = 1
        a_a[item] = count
      if item in a_a:
        count = count +1
        a_a[item] = count 
  return a_a


# create dictionary of areas to store the number of hurricanes involved in
dict_a_a = areas_affected_function(areas_affected)
# 5 
# Calculating Maximum Hurricane Count
def max_area(param1):
  max_area = "Central America"
  max_area_count = 0
  for element in param1:
    if max_area_count < param1[element]:
      max_area = element
      max_area_count = param1[element]
  return max_area, max_area_count





# find most frequently affected area and the number of hurricanes involved in
max_area_affected = max_area(dict_a_a)
#print("Area most affected with number of hurricanes: "+str(max_area_affected))

# 6
deaths_dict = {key:value for key, value in zip(names, deaths)}
# Calculating the Deadliest Hurricane
def deadliest_hurricane_function(param1):
  hurricane = "Cuba I"
  deaths = 0
  for element in param1:
    if deaths < param1[element]:
      hurricane = element
      deaths = param1[element]
  return hurricane, deaths
deadliest_hurricane = deadliest_hurricane_function(deaths_dict)


# find highest mortality hurricane and the number of deaths
#print("This is the deadliest hurricane with this many deaths: "+str(deadliest_hurricane))

# 7
deaths_dict = {key:value for key, value in zip(names, deaths)}
#print(deaths_dict)
mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}
# Rating Hurricanes by Mortality
def function_mortality_rating(param1):
  mortality_scale_dict = {0: [] , 1: [] , 2: [] , 3:[] , 4:[]}
  list_mortality_rating = {}
  for element in param1:
    if param1[element] <= 100:
      mortality_scale_dict[0].append(element)
    elif param1[element] <= 500:
      mortality_scale_dict[1].append(element)
    elif param1[element] <= 1000:
      mortality_scale_dict[2].append(element)
    elif param1[element] <= 10000:
      mortality_scale_dict[3].append(element)
    elif param1[element] > 10000:
      mortality_scale_dict[4].append(element)
  return mortality_scale_dict


# categorize hurricanes in new dictionary with mortality severity as key

fun_mort_rate = function_mortality_rating(deaths_dict)

# 8 Calculating Hurricane Maximum Damage
damages_dict = {key:value for key,value in zip(names, updated_damages)}

# find highest damage inducing hurricane and its total cost
def max_damage_function(param1):
  hurricane = "Cuba I"
  max_damage = 0
  for element in param1:
    if param1[element] == "Damages not recorded":
      param1[element] = 0
    elif max_damage < param1[element]:
      hurricane = element
      max_damage = param1[element]

  return hurricane, max_damage
max_damage = max_damage_function(damages_dict)
#print("hurricane with max damage: "+str(max_damage))
print("")
# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
def damage_scale_function(param1):
  damage_scale_dict = {0 : [], 1 : [], 2 : [], 3 : [], 4 : []}
  for element in param1:
    if param1[element] <= 100000000:
      damage_scale_dict[0].append(element)
    elif param1[element] <= 1000000000:
      damage_scale_dict[1].append(element)
    elif param1[element] <= 10000000000:
      damage_scale_dict[2].append(element)
    elif param1[element] <= 50000000000:
      damage_scale_dict[3].append(element)
    elif param1[element] > 50000000000:
      damage_scale_dict[4].append(element)  
  return damage_scale_dict
damages_scale = damage_scale_function(damages_dict)
print(damages_scale)
  
# categorize hurricanes in new dictionary with damage severity as key
